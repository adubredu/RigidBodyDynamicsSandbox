        - push!(LOAD_PATH, ".")
        - using RigidBodyDynamics
        - # using RigidBodyDynamicsSim
        - 
        - using FixedSizeArrays
        - using Quaternions
        - 
        - function test{J, Q}(joint::Joint{J}, q::Vector{Q})
        0     T = promote_type(J, Q)
        0     ret::Transform3D{T}
        -     # ret = joint_transform(joint, joint.jointType, q)
        0     if isa(joint.jointType, QuaternionFloating{J})
        0         ret = joint_transform(joint, joint.jointType::QuaternionFloating{J}, q)
        0     elseif isa(joint.jointType, Revolute{J})
        0         ret = joint_transform(joint, joint.jointType::Revolute{J}, q)
        -     else
        0         ret = Transform3D{T}(joint.frameBefore, joint.frameAfter)
        -     end
        0     ret
        - end
        - # function test{T}(q::Vector{T})
        - #     @inbounds joint_transform(joint, joint.jointType, q)
        - # end
        - 
        - function fun(n, joint, q)
        0     for i = 1 : n
        0         test(joint, q)
        -     end
        - end
        - 
        - function main()
        0     joint = Joint("bla", QuaternionFloating{Float64}())
        -     # joint = Joint("bla", rand(Revolute{Float64}))
        0     q = rand_configuration(joint, Float64)
        0     for i = 1 : 2
        0         Profile.clear()
        0         Profile.clear_malloc_data()
        0         @time fun(10000, joint, q)
        -     end
        - end
        - 
        - main()
        - 
